#!/usr/bin/env python
import SCons.Script
import platform

# Define the GlobRecursive function
def GlobRecursive(pattern, node="."):
    results = []
    for f in Glob(str(node) + "/*", source=True):
        if type(f) is SCons.Node.FS.Dir:
            results += GlobRecursive(pattern, f)
    results += Glob(str(node) + "/" + pattern, source=True)
    return results

# Retrieve version from the command line or default to 3
version = int(ARGUMENTS.get("version", 4))

# Import SCons and create the base environment
env = SConscript("godot-cpp/SConstruct")

# Used for the arch cross the 3 and 4 godot version
acrh = ""

# Pass the version
if version == 4:
    acrh = env["arch"]
    env.Append(CPPDEFINES=[("GODOT4", 1)])
elif version == 3:
    arch = env["arch_suffix"]
    env.Append(CPPDEFINES=[("GODOT3", 1)])

# Define platform-specific macro
if "platform" in env:
    platform_macro = "PLATFORM_{}".format(env["platform"].upper())
    env.Append(CPPDEFINES=[(platform_macro, 1)])

# Add bigobj flag
if ("platform" not in env and platform.system() == "Windows") or env.get("platform", "").lower() == "windows":
    env.Append(CCFLAGS="/bigobj")

# Add include directories to the environment
env.Append(CPPPATH=["include"])

# Glob all source files recursively in the src folder
sources = GlobRecursive("*.cpp", node="src")

# Create shared library
output_name = "rgn.{}.{}.{}{}".format(env["platform"], env["target"], acrh, env["SHLIBSUFFIX"])
if env["platform"] == "android":
    output_name = "lib" + output_name  # Append "lib" for Android platform
library = env.SharedLibrary(
    "bin/" + output_name,
    source=sources,
)

# Install the built library
shlib_only = [x for x in library if x.name.endswith(env["SHLIBSUFFIX"])]
install_targets = env.Install(env.Dir("../demo/addons/rgn/bin"), shlib_only)

# Set default targets
Default(install_targets)